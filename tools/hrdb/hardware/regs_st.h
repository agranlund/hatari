/* Autogenerated file */

#ifndef ST_HARDWARE_H
#define ST_HARDWARE_H
#include <stdint.h>
namespace Regs {

/* Enum MMU_BANK */
enum MMU_BANK {
	SIZE_128K            =      0, /* 128K */
	SIZE_512K            =      1, /* 512K */
	SIZE_2MB             =      2, /* 2MB */
	SIZE_RESERVED        =      3  /* reserved */
};

/* Enum RESOLUTION */
enum RESOLUTION {
	LOW                  =      0, /* ST-Low */
	MEDIUM               =      1, /* ST-Medium */
	HIGH                 =      2  /* ST-High */
};

/* Enum SYNC_RATE */
enum SYNC_RATE {
	HZ_60                =      0, /* 60Hz */
	HZ_50                =      1  /* 50Hz */
};

/* Enum SYNC_TYPE */
enum SYNC_TYPE {
	INTERNAL             =      0, /* Internal Sync */
	EXTERNAL             =      1  /* External Sync */
};

/* Enum -> string lookup declarations */
extern const char* GetString(MMU_BANK val);
extern const char* GetString(RESOLUTION val);
extern const char* GetString(SYNC_RATE val);
extern const char* GetString(SYNC_TYPE val);

/* Register Addresses */
static const uint32_t MMU_CONFIG                     = 0xff8001;
static const uint32_t VID_REG_BASE                   = 0xff8200;
static const uint32_t VID_SCREEN_HIGH                = 0xff8201;
static const uint32_t VID_SCREEN_MID                 = 0xff8203;
static const uint32_t VID_SCREEN_LOW_STE             = 0xff820d;
static const uint32_t VID_SCANLINE_OFFSET_STE        = 0xff820e;
static const uint32_t VID_HORIZ_SCROLL_STE           = 0xff8265;
static const uint32_t VID_SYNC_MODE                  = 0xff820a;
static const uint32_t VID_PAL_0                      = 0xff8240;
static const uint32_t VID_PAL_1                      = 0xff8242;
static const uint32_t VID_PAL_2                      = 0xff8244;
static const uint32_t VID_PAL_3                      = 0xff8246;
static const uint32_t VID_PAL_4                      = 0xff8248;
static const uint32_t VID_PAL_5                      = 0xff824a;
static const uint32_t VID_PAL_6                      = 0xff824c;
static const uint32_t VID_PAL_7                      = 0xff825e;
static const uint32_t VID_PAL_8                      = 0xff8250;
static const uint32_t VID_PAL_9                      = 0xff8252;
static const uint32_t VID_PAL_10                     = 0xff8254;
static const uint32_t VID_PAL_11                     = 0xff8256;
static const uint32_t VID_PAL_12                     = 0xff8258;
static const uint32_t VID_PAL_13                     = 0xff825a;
static const uint32_t VID_PAL_14                     = 0xff825c;
static const uint32_t VID_PAL_15                     = 0xff825e;
static const uint32_t VID_SHIFTER_RES                = 0xff8260;
static const uint32_t FDC_ACCESS                     = 0xff8604;
static const uint32_t FDC_STATUS                     = 0xff8606;
static const uint32_t FDC_DMA_BASE_HIGH              = 0xff8609;
static const uint32_t FDC_DMA_BASE_MID               = 0xff860b;
static const uint32_t FDC_DMA_BASE_LOW               = 0xff860d;

/* Register Field Accessors */

/* Register MMU_CONFIG ($ff8001)*/
/* Field BANK1 */
static const uint8_t MMU_CONFIG_BANK1_SHIFT = 0;
static const uint8_t MMU_CONFIG_BANK1_MASK = 3;
inline MMU_BANK GetField_MMU_CONFIG_BANK1(uint8_t value) { return static_cast<MMU_BANK>(((value)>>0) & 3); }

/* Field BANK0 */
static const uint8_t MMU_CONFIG_BANK0_SHIFT = 2;
static const uint8_t MMU_CONFIG_BANK0_MASK = 3;
inline MMU_BANK GetField_MMU_CONFIG_BANK0(uint8_t value) { return static_cast<MMU_BANK>(((value)>>2) & 3); }


/* Register VID_HORIZ_SCROLL_STE ($ff8265)*/
/* Field PIXELS */
static const uint8_t VID_HORIZ_SCROLL_STE_PIXELS_SHIFT = 0;
static const uint8_t VID_HORIZ_SCROLL_STE_PIXELS_MASK = 15;
inline uint8_t GetField_VID_HORIZ_SCROLL_STE_PIXELS(uint8_t value) { return static_cast<uint8_t>(((value)>>0) & 15); }


/* Register VID_SYNC_MODE ($ff820a)*/
/* Field TYPE */
static const uint8_t VID_SYNC_MODE_TYPE_SHIFT = 0;
static const uint8_t VID_SYNC_MODE_TYPE_MASK = 1;
inline SYNC_TYPE GetField_VID_SYNC_MODE_TYPE(uint8_t value) { return static_cast<SYNC_TYPE>(((value)>>0) & 1); }

/* Field RATE */
static const uint8_t VID_SYNC_MODE_RATE_SHIFT = 1;
static const uint8_t VID_SYNC_MODE_RATE_MASK = 1;
inline SYNC_RATE GetField_VID_SYNC_MODE_RATE(uint8_t value) { return static_cast<SYNC_RATE>(((value)>>1) & 1); }


/* Register VID_SHIFTER_RES ($ff8260)*/
/* Field RES */
static const uint8_t VID_SHIFTER_RES_RES_SHIFT = 0;
static const uint8_t VID_SHIFTER_RES_RES_MASK = 3;
inline RESOLUTION GetField_VID_SHIFTER_RES_RES(uint8_t value) { return static_cast<RESOLUTION>(((value)>>0) & 3); }


/* Register FDC_STATUS ($ff8606)*/
/* Field ERROR */
static const uint8_t FDC_STATUS_ERROR_SHIFT = 0;
static const uint8_t FDC_STATUS_ERROR_MASK = 1;
inline bool GetField_FDC_STATUS_ERROR(uint16_t value) { return static_cast<bool>(((value)>>0) & 1); }

/* Field SECT_CNT */
static const uint8_t FDC_STATUS_SECT_CNT_SHIFT = 1;
static const uint8_t FDC_STATUS_SECT_CNT_MASK = 1;
inline bool GetField_FDC_STATUS_SECT_CNT(uint16_t value) { return static_cast<bool>(((value)>>1) & 1); }

/* Field DATA_REQ */
static const uint8_t FDC_STATUS_DATA_REQ_SHIFT = 2;
static const uint8_t FDC_STATUS_DATA_REQ_MASK = 1;
inline bool GetField_FDC_STATUS_DATA_REQ(uint16_t value) { return static_cast<bool>(((value)>>2) & 1); }


} // namespace
#endif
